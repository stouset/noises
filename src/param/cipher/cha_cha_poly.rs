pub use super::{Cipher, Key, Nonce, Digest};

use sodium;

use std::mem;

pub struct ChaChaPoly;

#[allow(unsafe_code)]
impl Cipher for ChaChaPoly {
    fn hash(data: &[u8]) -> Digest {
        let mut out = unsafe { mem::uninitialized() };

        sodium::hash_sha256(&mut out, data);

        out
    }

    fn hmac_hash(key: &Key, data: &[u8]) -> Key {
        unsafe {
            Key::new(|out| {
                sodium::auth_hmacsha256(
                    out,
                    key.borrow().as_ref(),
                    data,
                );
            })
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use std::iter;

    #[test]
    fn test_vector_hash_1() {
        let data   = b"abc";
        let vector = b"\xba\x78\x16\xbf\x8f\x01\xcf\xea\x41\x41\x40\xde\x5d\xae\x22\x23\xb0\x03\x61\xa3\x96\x17\x7a\x9c\xb4\x10\xff\x61\xf2\x00\x15\xad";

        test_vector_hash(data, vector);
    }

    #[test]
    fn test_vector_hash_2() {
        let data   = b"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
        let vector = b"\x24\x8d\x6a\x61\xd2\x06\x38\xb8\xe5\xc0\x26\x93\x0c\x3e\x60\x39\xa3\x3c\xe4\x59\x64\xff\x21\x67\xf6\xec\xed\xd4\x19\xdb\x06\xc1";

        test_vector_hash(data, vector);
    }

    #[test]
    fn test_vector_hash_3() {
        let data   = iter::repeat("a").take(1000000).collect::<String>();
        let vector = b"\xcd\xc7\x6e\x5c\x99\x14\xfb\x92\x81\xa1\xc7\xe2\x84\xd7\x3e\x67\xf1\x80\x9a\x48\xa4\x97\x20\x0e\x04\x6d\x39\xcc\xc7\x11\x2c\xd0";

        test_vector_hash(data.as_bytes(), vector);
    }

    #[test]
    fn test_vector_hash_4() {
        let data   = iter::repeat("0123456701234567012345670123456701234567012345670123456701234567").take(10).collect::<String>();
        let vector = b"\x59\x48\x47\x32\x84\x51\xbd\xfa\x85\x05\x62\x25\x46\x2c\xc1\xd8\x67\xd8\x77\xfb\x38\x8d\xf0\xce\x35\xf2\x5a\xb5\x56\x2b\xfb\xb5";

        test_vector_hash(data.as_bytes(), vector);
    }

    #[test]
    fn test_vector_hash_6() {
        let data   = b"\x19";
        let vector = b"\x68\xaa\x2e\x2e\xe5\xdf\xf9\x6e\x33\x55\xe6\xc7\xee\x37\x3e\x3d\x6a\x4e\x17\xf7\x5f\x95\x18\xd8\x43\x70\x9c\x0c\x9b\xc3\xe3\xd4";

        test_vector_hash(data, vector);
    }

    #[test]
    fn test_vector_hash_8() {
        let data   = b"\xe3\xd7\x25\x70\xdc\xdd\x78\x7c\xe3\x88\x7a\xb2\xcd\x68\x46\x52";
        let vector = b"\x17\x5e\xe6\x9b\x02\xba\x9b\x58\xe2\xb0\xa5\xfd\x13\x81\x9c\xea\x57\x3f\x39\x40\xa9\x4f\x82\x51\x28\xcf\x42\x09\xbe\xab\xb4\xe8";

        test_vector_hash(data, vector);
    }

    #[test]
    fn test_vector_hash_10() {
        let data   = b"\x83\x26\x75\x4e\x22\x77\x37\x2f\x4f\xc1\x2b\x20\x52\x7a\xfe\xf0\x4d\x8a\x05\x69\x71\xb1\x1a\xd5\x71\x23\xa7\xc1\x37\x76\x00\x00\xd7\xbe\xf6\xf3\xc1\xf7\xa9\x08\x3a\xa3\x9d\x81\x0d\xb3\x10\x77\x7d\xab\x8b\x1e\x7f\x02\xb8\x4a\x26\xc7\x73\x32\x5f\x8b\x23\x74\xde\x7a\x4b\x5a\x58\xcb\x5c\x5c\xf3\x5b\xce\xe6\xfb\x94\x6e\x5b\xd6\x94\xfa\x59\x3a\x8b\xeb\x3f\x9d\x65\x92\xec\xed\xaa\x66\xca\x82\xa2\x9d\x0c\x51\xbc\xf9\x33\x62\x30\xe5\xd7\x84\xe4\xc0\xa4\x3f\x8d\x79\xa3\x0a\x16\x5c\xba\xbe\x45\x2b\x77\x4b\x9c\x71\x09\xa9\x7d\x13\x8f\x12\x92\x28\x96\x6f\x6c\x0a\xdc\x10\x6a\xad\x5a\x9f\xdd\x30\x82\x57\x69\xb2\xc6\x71\xaf\x67\x59\xdf\x28\xeb\x39\x3d\x54\xd6";
        let vector = b"\x97\xdb\xca\x7d\xf4\x6d\x62\xc8\xa4\x22\xc9\x41\xdd\x7e\x83\x5b\x8a\xd3\x36\x17\x63\xf7\xe9\xb2\xd9\x5f\x4f\x0d\xa6\xe1\xcc\xbc";

        test_vector_hash(data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_1() {
        let mut key    = *b"\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
        let     data   =  b"Hi There";
        let     vector =  b"\xb0\x34\x4c\x61\xd8\xdb\x38\x53\x5c\xa8\xaf\xce\xaf\x0b\xf1\x2b\x88\x1d\xc2\x00\xc9\x83\x3d\xa7\x26\xe9\x37\x6c\x2e\x32\xcf\xf7";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_2() {
        let mut key    = *b"Jefe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
        let     data   =  b"what do ya want for nothing?";
        let     vector =  b"\x5b\xdc\xc1\x46\xbf\x60\x75\x4e\x6a\x04\x24\x26\x08\x95\x75\xc7\x5a\x00\x3f\x08\x9d\x27\x39\x83\x9d\xec\x58\xb9\x64\xec\x38\x43";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_3() {
        let mut key    = *b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
        let     data   =  b"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd";
        let     vector =  b"\x77\x3e\xa9\x1e\x36\x80\x0e\x46\x85\x4d\xb8\xeb\xd0\x91\x81\xa7\x29\x59\x09\x8b\x3e\xf8\xc1\x22\xd9\x63\x55\x14\xce\xd5\x65\xfe";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_4() {
        let mut key    = *b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x00\x00\x00\x00\x00\x00\x00";
        let     data   =  b"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd";
        let     vector =  b"\x82\x55\x8a\x38\x9a\x44\x3c\x0e\xa4\xcc\x81\x98\x99\xf2\x08\x3a\x85\xf0\xfa\xa3\xe5\x78\xf8\x07\x7a\x2e\x3f\xf4\x67\x29\x66\x5b";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_5() {
        let mut key    = *b"\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
        let     data   =  b"Test With Truncation";
        let     vector =  b"\xa3\xb6\x16\x74\x73\x10\x0e\xe0\x6e\x0c\x79\x6c\x29\x55\x55\x2b\xfa\x6f\x7c\x0a\x6a\x8a\xef\x8b\x93\xf8\x60\xaa\xb0\xcd\x20\xc5";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_6() {
        let mut key    = *b"\x45\xad\x4b\x37\xc6\xe2\xfc\x0a\x2c\xfc\xc1\xb5\xda\x52\x41\x32\xec\x70\x76\x15\xc2\xca\xe1\xdb\xbc\x43\xc9\x7a\xa5\x21\xdb\x81";
        let     data   =  b"Test Using Larger Than Block-Size Key - Hash Key First";
        let     vector =  b"\x60\xe4\x31\x59\x1e\xe0\xb6\x7f\x0d\x8a\x26\xaa\xcb\xf5\xb7\x7f\x8e\x0b\xc6\x21\x37\x28\xc5\x14\x05\x46\x04\x0f\x0e\xe3\x7f\x54";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    #[test]
    fn test_vector_hmac_hash_7() {
        let mut key    = *b"\x45\xad\x4b\x37\xc6\xe2\xfc\x0a\x2c\xfc\xc1\xb5\xda\x52\x41\x32\xec\x70\x76\x15\xc2\xca\xe1\xdb\xbc\x43\xc9\x7a\xa5\x21\xdb\x81";
        let     data   =  b"This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.";
        let     vector =  b"\x9b\x09\xff\xa7\x1b\x94\x2f\xcb\x27\x63\x5f\xbc\xd5\xb0\xe9\x44\xbf\xdc\x63\x64\x4f\x07\x13\x93\x8a\x7f\x51\x53\x5c\x3a\x35\xe2";

        test_vector_hmac_hash(&mut key, data, vector);
    }

    fn test_vector_hash(data: &[u8], vector: &[u8; 32]) {
        let result = ChaChaPoly::hash(data);

        assert_eq!(*vector, result);
    }

    fn test_vector_hmac_hash(key: &mut [u8; 32], data: &[u8], vector: &[u8; 32]) {
        let key    = Key::from(key);
        let result = ChaChaPoly::hmac_hash(&key, data);

        assert_eq!(*vector, *result.borrow());
    }
}
